diff --git a/tensorflow/contrib/lite/toco/graph_transformations/resolve_tensorflow_switch.cc b/tensorflow/contrib/lite/toco/graph_transformations/resolve_tensorflow_switch.cc
index a418073..69a9f11 100644
--- a/tensorflow/contrib/lite/toco/graph_transformations/resolve_tensorflow_switch.cc
+++ b/tensorflow/contrib/lite/toco/graph_transformations/resolve_tensorflow_switch.cc
@@ -24,6 +24,25 @@ limitations under the License.
 
 namespace toco {
 
+static void EraseInputOfMergeNode(const Model& model, const Operator& op) {
+  for (const auto& output : op.outputs) {
+    for (const auto& other_op : model.operators) {
+      auto input_it = other_op->inputs.begin();
+      while (input_it != other_op->inputs.end()) {
+        if (*input_it == output) {
+          if (other_op->type == OperatorType::kTensorFlowMerge) {
+            other_op->inputs.erase(input_it);
+            continue;
+          } else {
+            EraseInputOfMergeNode(model, *other_op);
+          }
+        }
+        ++input_it;
+      }
+    }
+  }
+}
+
 bool ResolveTensorFlowSwitch::Run(Model* model, std::size_t op_index) {
   const auto switch_it = model->operators.begin() + op_index;
   const auto* switch_op = switch_it->get();
@@ -86,18 +105,9 @@ bool ResolveTensorFlowSwitch::Run(Model* model, std::size_t op_index) {
   // are Merge nodes that have been resolved already and should be have as
   // Identity nodes, simply forwarding their input.
   //
-  for (const auto& other_op : model->operators) {
-    auto input_it = other_op->inputs.begin();
-    while (input_it != other_op->inputs.end()) {
-      if (*input_it == switch_op->outputs[nonselected_output_index]) {
-        // Let us guard our assumption that only Merge nodes consume the outputs
-        // of Switch nodes:
-        CHECK(other_op->type == OperatorType::kTensorFlowMerge);
-        input_it = other_op->inputs.erase(input_it);
-      } else {
-        ++input_it;
-      }
-    }
+  auto* op = GetOpWithInput(*model, switch_op->outputs[nonselected_output_index]);
+  if (op) {
+    EraseInputOfMergeNode(*model, *op);
   }
 
   // Remove the output arrays if they are now unused.
